// src/agents/GuardAgent.js
// –§–∞–π–ª input_file_1.js

import '../utils/loadEnv.js';
import { Logger } from '../core/Logger.js';
import { TaskStore } from '../core/db/TaskStore.js';

let forcedFailureConsumed = false;

const FORMAL_MARKERS = [
  '—É–≤–∞–∂–∞–µ–º',
  '–Ω–∞—Å—Ç–æ—è—â–∏–º —Å–æ–æ–±—â–∞–µ–º',
  '–Ω–∞—Å—Ç–æ—è—â–∏–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º',
  '—Å–æ–≥–ª–∞—Å–Ω–æ',
  '–ø—Ä–∏–∫–∞–∑',
  '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
  '—Ä–µ–≥–ª–∞–º–µ–Ω—Ç',
  '–æ—Ñ–∏—Ü–∏–∞–ª—å',
  '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤',
  '—Å–æ–æ–±—â–∞–µ–º',
  '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º',
  '—Å–æ–æ–±—â–∏—Ç—å –≤–∞–º',
  '–∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Å',
  '—É–≤–µ–¥–æ–º–ª—è',
];

const ENTHUSIASTIC_MARKERS = [
  '—Å—É–ø–µ—Ä',
  '–º–µ–≥–∞',
  '–∫—Ä—É—Ç–æ',
  '–≤–∞—É',
  '–ø–æ—Ç—Ä—è—Å–∞',
  '—Ñ–∞–Ω—Ç–∞—Å—Ç',
  '–æ–≥–æ–Ω—å',
  '–Ω–µ–≤–µ—Ä–æ—è—Ç',
  '–æ–±–æ–∂–∞—é',
  '–∫–∞–π—Ñ',
  '—ç–Ω–µ—Ä–≥',
  '–≤ –≤–æ—Å—Ç–æ—Ä–≥',
  '–±–æ–º–±–∏—á–µ—Å',
  '–≤–∞—â–µ',
  '–±–µ–∑—É–º–Ω–æ',
  'üî•',
  '‚ú®',
  'üòç',
];

const CASUAL_MARKERS = [
  '—Ä–µ–±—è—Ç–∞',
  '–¥—Ä—É–∑—å—è',
  '–ø—Ä–æ—Å—Ç–æ',
  '–∫—Å—Ç–∞—Ç–∏',
  '–¥–∞–≤–∞–π—Ç–µ',
  '–∫–æ—Ä–æ—á–µ',
  '—á–µ—Å—Ç–Ω–æ',
  '—Å–º–æ—Ç—Ä–∏—Ç–µ',
  '–∫–∞–∫ –∂–µ',
  '–Ω—É —á—Ç–æ',
  '–Ω—É –¥–∞–≤–∞–π—Ç–µ',
  '–ø—Ä–∏–∫–∏–Ω—å—Ç–µ',
];

const FRIENDLY_MARKERS = [
  '–¥—Ä—É–∑—å—è',
  '–∫–æ–º–∞–Ω–¥–∞',
  '—Ä–∞–¥—ã',
  '–¥–µ–ª—é—Å—å',
  '–ø–æ–¥–µ–ª–∏–º—Å—è',
  '–≤–º–µ—Å—Ç–µ',
  '–±—É–¥–µ–º —Ä–∞–¥—ã',
  '–æ–±–Ω–∏–º–∞–µ–º',
  '–ø—Ä–∏–≥–ª–∞—à–∞–µ–º',
  'üòä',
  '‚ù§Ô∏è',
];

const PLAYFUL_MARKERS = [
  '–∏–≥—Ä–∏–≤',
  '–≤–µ—Å–µ–ª',
  '—à—É—Ç',
  '—Ö–∞-—Ö–∞',
  '–ø—Ä–∏–∫–ª—é—á',
  '–æ–∑–æ—Ä–Ω',
  '—à–∞–ª–æ—Å—Ç',
  '—É—Ä–∞',
  'üòâ',
  'üòÅ',
];

const TONE_ALIASES = {
  'super casual': 'casual',
  'super-casual': 'casual',
  'very casual': 'casual',
  '–æ—á–µ–Ω—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π': 'casual',
  '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π': 'casual',
  '—ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã–π': 'enthusiastic',
  '—Å—É–ø–µ—Ä-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã–π': 'enthusiastic',
  '—Å—É–ø–µ—Ä —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã–π': 'enthusiastic',
  '–æ—á–µ–Ω—å —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã–π': 'enthusiastic',
  '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π': 'friendly',
  '–æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π': 'friendly',
  '–∏–≥—Ä–∏–≤—ã–π': 'playful',
  '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π': 'professional',
  '–¥–µ–ª–æ–≤–æ–π': 'professional',
  '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π': 'formal',
  '—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π': 'formal',
};

function normalize(text) {
  return typeof text === 'string' ? text.trim().toLowerCase() : '';
}

function hasAny(text, markers) {
  const normalized = normalize(text);
  return markers.some(marker => normalized.includes(marker));
}

function countMarkers(text, markers) {
  const normalized = normalize(text);
  if (!normalized || !markers || markers.length === 0) {
    return 0;
  }
  let total = 0;
  for (const marker of markers) {
    if (!marker) {
      continue;
    }
    let searchIndex = normalized.indexOf(marker);
    while (searchIndex !== -1) {
      total += 1;
      searchIndex = normalized.indexOf(marker, searchIndex + marker.length);
    }
  }
  return total;
}

function countExclamations(text) {
  if (typeof text !== 'string') {
    return 0;
  }
  const matches = text.match(/!/g);
  return matches ? matches.length : 0;
}

function detectToneIssue(content, expectedTone) {
  if (!content || !expectedTone) {
    return null;
  }

  const normalizedTone = normalize(expectedTone);
  const toneKey = TONE_ALIASES[normalizedTone] || normalizedTone;
  const lowerContent = normalize(content);

  if (process.env.MOCK_MODE === 'true') {
    return null;
  }

  if (toneKey === 'enthusiastic') {
    const exclamations = countExclamations(content);
    const enthusiasticScore = countMarkers(lowerContent, ENTHUSIASTIC_MARKERS);
    const formalScore = countMarkers(lowerContent, FORMAL_MARKERS);

    const hasStrongFormalTone = formalScore >= 2;
    const lacksEnergeticSignals = enthusiasticScore === 0 && exclamations === 0;
    const borderlineEnergetic = enthusiasticScore <= 1 && exclamations <= 1;

    if (hasStrongFormalTone && lacksEnergeticSignals) {
      return 'TONE_MISMATCH: –¢–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤.';
    }

    if (formalScore >= 3 && borderlineEnergetic) {
      return 'TONE_MISMATCH: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–≥–æ —Ç–æ–Ω–∞.';
    }

    return null;
  }

  if (toneKey === 'casual') {
    const casualScore = countMarkers(lowerContent, CASUAL_MARKERS);
    const formalScore = countMarkers(lowerContent, FORMAL_MARKERS);

    if (formalScore >= 2 && casualScore === 0) {
      return 'TONE_MISMATCH: –¢–µ–∫—Å—Ç –∑–≤—É—á–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –≤–º–µ—Å—Ç–æ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.';
    }

    if (formalScore >= 3 && casualScore <= 1) {
      return 'TONE_MISMATCH: –í —Ç–µ–∫—Å—Ç–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –¥–µ–ª–æ–≤—ã–µ –æ–±–æ—Ä–æ—Ç—ã –∏ –ø–æ—á—Ç–∏ –Ω–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.';
    }

    return null;
  }

  if (toneKey === 'friendly') {
    const friendlyScore = countMarkers(lowerContent, FRIENDLY_MARKERS) + countMarkers(lowerContent, CASUAL_MARKERS);
    const formalScore = countMarkers(lowerContent, FORMAL_MARKERS);

    if (friendlyScore === 0 && formalScore >= 2) {
      return 'TONE_MISMATCH: –î–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–µ–ø–ª—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π, –∑–∞—Ç–æ –º–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑.';
    }

    return null;
  }

  if (toneKey === 'playful') {
    const playfulScore = countMarkers(lowerContent, PLAYFUL_MARKERS);
    const exclamations = countExclamations(content);

    if (playfulScore === 0 && exclamations <= 1) {
      return 'TONE_MISMATCH: –ù–µ –≤–∏–¥–Ω–æ –∏–≥—Ä–∏–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —ç–º–æ—Ü–∏–π –∏–ª–∏ –ª–µ–≥–∫–∏—Ö —à—É—Ç–æ–∫.';
    }

    return null;
  }

  if (toneKey === 'professional' || toneKey === 'formal') {
    const slangScore = countMarkers(lowerContent, [...CASUAL_MARKERS, ...ENTHUSIASTIC_MARKERS]);
    const exclamations = countExclamations(content);

    if (slangScore >= 2 || (slangScore > 0 && exclamations >= 2)) {
      return 'TONE_MISMATCH: –°–ª–∏—à–∫–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.';
    }

    return null;
  }

  return null;
}

export class GuardAgent {
  static async execute(nodeId) {
    const node = TaskStore.getNode(nodeId);
    if (!node) {
      throw new Error(`GuardAgent node ${nodeId} not found.`);
    }

    const logger = new Logger(node.taskId);
    logger.logStep(nodeId, 'START', { message: `Validating previous node for: ${node.input_data.check}` });

    const prevNodeId = node.dependsOn[0];
    const prevResult = prevNodeId ? TaskStore.getResult(prevNodeId) : null;
    const contentToValidate = prevResult?.text || prevResult?.imagePath || 'No Content';
    const dependencyNode = prevNodeId ? TaskStore.getNode(prevNodeId) : null;

    try {
      const flag = (process.env.FORCE_GUARD_FAIL || 'false').toLowerCase();
      if (flag === 'true' || (flag === 'once' && !forcedFailureConsumed)) {
        forcedFailureConsumed = true;
        const reason = 'FORCED_FAIL: Failure triggered by configuration.';
        logger.logStep(nodeId, 'END', { status: 'FAILED', reason });
        TaskStore.updateNodeStatus(nodeId, 'FAILED', { reason });
        return { status: 'FAILED', reason };
      }

      let failureReason = null;

      if (node.input_data.check === 'tone') {
        const expectedTone = dependencyNode?.input_data?.tone;
        failureReason = detectToneIssue(contentToValidate, expectedTone);
      }

      if (node.input_data.check === 'image_quality' && !prevResult?.imagePath) {
        failureReason = 'IMAGE_VALIDATION_FAILED: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.';
      }

      if (failureReason) {
        logger.logStep(nodeId, 'END', { status: 'FAILED', reason: failureReason });
        TaskStore.updateNodeStatus(nodeId, 'FAILED', { reason: failureReason });
        return { status: 'FAILED', reason: failureReason };
      }

      logger.logStep(nodeId, 'END', { status: 'SUCCESS', message: 'Content Passed Validation.' });
      TaskStore.updateNodeStatus(nodeId, 'SUCCESS', {
        status: 'SUCCESS',
        approvedContent: contentToValidate,
      });
      return { status: 'SUCCESS' };
    } catch (error) {
      logger.logStep(nodeId, 'ERROR', { message: error.message });
      TaskStore.updateNodeStatus(nodeId, 'FAILED', { error: error.message });
      throw error;
    }
  }
}
